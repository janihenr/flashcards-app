---
description: "Overview of all Cursor Rules available in this project"
---

# Cursor Rules Overview

This project has a comprehensive set of Cursor Rules to ensure consistent development practices and automatic logging.

## Active Rules

### 1. **Logging System** ([logging-system.mdc](mdc:.cursor/rules/logging-system.mdc))
- **Type**: Always Applied
- **Purpose**: Automatically tracks all user interactions and file changes
- **Features**: 
  - Logs every user prompt
  - Records all file modifications
  - Maintains version-specific log files
  - Creates new log files when package.json version changes

### 2. **Project Structure** ([project-structure.mdc](mdc:.cursor/rules/project-structure.mdc))
- **Type**: Always Applied
- **Purpose**: Provides navigation guidance for the Next.js flashcards app
- **Features**:
  - Key directory explanations
  - File naming conventions
  - Architecture overview
  - Technology stack reference

### 3. **TypeScript Patterns** ([typescript-patterns.mdc](mdc:.cursor/rules/typescript-patterns.mdc))
- **Type**: File-Specific (*.ts, *.tsx)
- **Purpose**: Enforces TypeScript best practices
- **Features**:
  - Zod-derived type usage
  - Proper import organization
  - Server action type safety
  - Component props typing

### 4. **Database Patterns** ([database-patterns.mdc](mdc:.cursor/rules/database-patterns.mdc))
- **Type**: File-Specific (database-related files)
- **Purpose**: Ensures secure and proper Drizzle ORM usage
- **Features**:
  - Authentication checks
  - Ownership verification
  - Transaction patterns
  - Security best practices

## Current Version

**App Version**: 0.1.0 (from [package.json](mdc:package.json))  
**Current Log File**: [logs/development-log-v0.1.0.md](mdc:logs/development-log-v0.1.0.md)

## How It Works

1. **Always Applied Rules** are automatically used in every interaction
2. **File-Specific Rules** are applied based on file patterns (globs)
3. **Manual Rules** (like this one) can be fetched when needed
4. **Logging** happens automatically for every user interaction

## Key Benefits

- **Consistency**: Enforces project patterns across all development
- **Documentation**: Automatic logging of all changes and decisions
- **Security**: Built-in authentication and authorization patterns
- **Type Safety**: Strong TypeScript usage throughout the codebase
- **Traceability**: Complete history of all modifications and user requests

## Usage

These rules work automatically in the background. The logging system will:
- Track every user prompt
- Log all file changes with descriptions
- Maintain version history
- Create new log files when versions change

No manual intervention is required - just develop normally and everything will be logged automatically!
