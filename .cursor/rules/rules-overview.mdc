
# Cursor Rules Overview

This project has a comprehensive set of Cursor Rules to ensure consistent development practices.

## Active Rules

### 1. **Logging System** ([logging-system.mdc](mdc:.cursor/rules/logging-system.mdc)) - **[DISABLED]**
- **Type**: Optional (was Always Applied)
- **Purpose**: Can track user interactions and file changes when specifically requested
- **Status**: Currently disabled to reduce overhead
- **Features**: 
  - Can log user prompts when requested
  - Can record file modifications when requested
  - Can maintain version-specific log files when requested
  - Can create new log files when package.json version changes

### 2. **Project Structure** ([project-structure.mdc](mdc:.cursor/rules/project-structure.mdc))
- **Type**: Always Applied
- **Purpose**: Provides navigation guidance for the Next.js flashcards app
- **Features**:
  - Key directory explanations
  - File naming conventions
  - Architecture overview
  - Technology stack reference

### 3. **TypeScript Patterns** ([typescript-patterns.mdc](mdc:.cursor/rules/typescript-patterns.mdc))
- **Type**: File-Specific (*.ts, *.tsx)
- **Purpose**: Enforces TypeScript best practices
- **Features**:
  - Zod-derived type usage
  - Proper import organization
  - Server action type safety
  - Component props typing

### 4. **Database Patterns** ([database-patterns.mdc](mdc:.cursor/rules/database-patterns.mdc))
- **Type**: File-Specific (database-related files)
- **Purpose**: Ensures secure and proper Drizzle ORM usage
- **Features**:
  - Authentication checks
  - Ownership verification
  - Transaction patterns
  - Security best practices

## Current Version

**App Version**: 0.1.0 (from [package.json](mdc:package.json))  
**Current Log File**: [logs/development-log-v0.1.0.md](mdc:logs/development-log-v0.1.0.md) - **[LOGGING DISABLED]**

## How It Works

1. **Always Applied Rules** are automatically used in every interaction
2. **File-Specific Rules** are applied based on file patterns (globs)
3. **Manual/Optional Rules** (like logging) are used only when specifically requested
4. **Logging** is now DISABLED by default to reduce overhead

## Key Benefits

- **Consistency**: Enforces project patterns across all development
- **Optional Documentation**: Logging available when needed, but not automatic
- **Security**: Built-in authentication and authorization patterns
- **Type Safety**: Strong TypeScript usage throughout the codebase
- **Reduced Overhead**: No automatic logging unless requested

## Re-enabling Logging

To re-enable automatic logging, simply ask for it and the logging system will be reactivated with automatic tracking of all changes and user requests.

## Usage

The remaining rules work automatically in the background. Logging is now optional and will only happen when you specifically request it, reducing the overhead significantly while keeping all other development patterns intact.


No manual intervention is required - just develop normally and everything will be logged automatically!
